{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },

  "IdentityServer": {
    "IdentityResources": [ //represent claims about a user like user ID, display name, email address etc. An identity resource is a named group of claims that can be requested using the scope parameter.
      {
        "Name": "openid",
        "DisplayName": "Open ID",
        "Required": true,
        "UserClaims": [ "sub" ] //sub means user id that we mention about IdentityClaimsProfileService. We can add new claims here but sub is mandatory.
      },
      {
        "Name": "profile",
        "DisplayName": "User profile",
        "Emphasize": true,
        "UserClaims": [ "name", "family_name", "given_name", "middle_name", "preferred_username", "profile", "picture", "website", "gender", "birthdate", "zoneinfo", "locale", "updated_at", "role" ]
      }
    ],
    "ApiResources": [ // represent functionality a client wants to access. Typically, they are HTTP-based endpoints (aka APIs), but could be also message queuing endpoints or similar.
      {
        "Name": "portal-resource",
        "DisplayName": "API Resource",
        "UserClaims": [ "id", "name", "email", "role" ], //These claim types will be automatically generated in database. After that these will be configured in IProfileService.
        "Scopes": [
          { //we can define more than one API scopes here
            "Name": "rest.auth",
            "DisplayName": "API Resource",
            "Required": true,
            "Emphasize": false,
            "ShowInDiscoveryDocument": true
          }
        ]
      },
      {
        "Name": "web-resource",
        "DisplayName": "web Resource",
        "UserClaims": [ "id", "name", "email", "role" ], //These claim types will be automatically generated in database. After that these will be configured in IProfileService.
        "Scopes": [
          { //we can define more than one API scopes here
            "Name": "web.auth",
            "DisplayName": "web Resource",
            "Required": true,
            "Emphasize": false,
            "ShowInDiscoveryDocument": true
          }
        ]
      }
    ],

    "ApiScopes": [
      { //we can define more than one API scopes here
        "Name": "rest.auth",
        "DisplayName": "API Resource",
        "Required": true,
        "Emphasize": false,
        "ShowInDiscoveryDocument": true
      },
      { //we can define more than one API scopes here
        "Name": "web.auth",
        "DisplayName": "web Resource",
        "Required": true,
        "Emphasize": false,
        "ShowInDiscoveryDocument": true
      }
    ],

    "Clients": [ // Clients consume the API's in the system.
      {
        "ClientId": "portal-api", //unique name
        "AlwaysIncludeUserClaimsInIdToken": true,
        "AllowOfflineAccess": true, //if true, it activates refresh tokens.Automatically refresh the token without relogin.
        "AccessTokenLifetime": 3600, //Token refresh time. Unit is seconds.
        "RequireConsent": false,
        "ClientSecrets": [ { "Value": "write your encryted secret here" } ], //use SHA26 encryption algorithm.
        "AllowedGrantTypes": [ "password", "authorization_code", "client_credential" ],
        "AllowedScopes": [ "openid", "profile", "rest.auth", "web.auth" ],
        "Redirecturis": [
          "http://localhost:57407/signin-oidc"
        ],
        "PostLogoutRedirecturis": [
          "http://localhost:57407/signout-callback-oidc"
        ],
        "RefreshTokenUsage": "OneTimeOnly",
        "RequireClientSecret": false,
        "Enabled": true,
        "AllowAccessTokensViaBrowser": true
      }
    ]
  },


  "ConnectionStrings": {
    "DefaultConnection": "Username={write your username};Password={write your pasword};Host={write your DB host};Port={write port};Database={write DB name};"
  }
}
